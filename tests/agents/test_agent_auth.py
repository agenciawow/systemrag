"""
Teste da autentica√ß√£o da API de agentes

Verifica se a autentica√ß√£o est√° funcionando corretamente.
"""

import requests
import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

# URL base da API de agentes
BASE_URL = "http://localhost:8001"

# API Key para testes
API_KEY = os.getenv("API_KEY", "sistemarag-api-key-2024")

def test_public_endpoint():
    """Testa endpoint p√∫blico (sem autentica√ß√£o)"""
    print("=== TESTE ENDPOINT P√öBLICO ===")
    
    try:
        response = requests.get(f"{BASE_URL}/auth-info")
        print(f"‚úÖ Endpoint p√∫blico funcionando")
        print(f"Resposta: {response.json()}")
        assert response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erro no endpoint p√∫blico: {e}")
        assert False, f"Erro no endpoint p√∫blico: {e}"


def test_protected_endpoint_without_auth():
    """Testa endpoint protegido sem autentica√ß√£o (deve falhar)"""
    print("\n=== TESTE SEM AUTENTICA√á√ÉO (deve falhar) ===")
    
    try:
        response = requests.get(f"{BASE_URL}/v1/agents")
        print("‚úÖ Rejei√ß√£o de acesso sem auth funcionando")
        print(f"Resposta: {response.json()}")
        assert response.status_code in [401, 403], f"Expected 401 or 403, got {response.status_code}"
    except Exception as e:
        print(f"‚ùå Erro no teste sem auth: {e}")
        assert False, f"Erro no teste sem auth: {e}"


def test_protected_endpoint_with_wrong_auth():
    """Testa endpoint protegido com autentica√ß√£o errada (deve falhar)"""
    print("\n=== TESTE COM AUTENTICA√á√ÉO ERRADA (deve falhar) ===")
    
    headers = {
        "Authorization": "Bearer chave-errada",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{BASE_URL}/v1/agents", headers=headers)
        print("‚úÖ Rejei√ß√£o de chave inv√°lida funcionando")
        print(f"Resposta: {response.json()}")
        assert response.status_code == 401
    except Exception as e:
        print(f"‚ùå Erro no teste com auth errada: {e}")
        assert False, f"Erro no teste com auth errada: {e}"


def test_protected_endpoint_with_correct_auth():
    """Testa endpoint protegido com autentica√ß√£o correta (deve funcionar)"""
    print("\n=== TESTE COM AUTENTICA√á√ÉO CORRETA (deve funcionar) ===")
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{BASE_URL}/v1/agents", headers=headers)
        print("‚úÖ Acesso com auth correta funcionando")
        data = response.json()
        print(f"Agentes encontrados: {len(data.get('agents', []))}")
        assert response.status_code == 200
    except Exception as e:
        print(f"‚ùå Erro no teste com auth correta: {e}")
        assert False, f"Erro no teste com auth correta: {e}"


def load_test_questions():
    """Carrega perguntas de teste de arquivo de configura√ß√£o"""
    import json
    questions_file = "test_configs/test_auth_questions.json"
    
    try:
        if os.path.exists(questions_file):
            with open(questions_file, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao carregar perguntas de {questions_file}: {e}")
    
    # Fallback para perguntas padr√£o
    return [
        {
            "question": "Ol√°, voc√™ est√° funcionando?",
            "expected_response_indicators": ["ol√°", "funcionando", "sim", "ativo"],
            "test_type": "basic_functionality",
            "description": "Teste b√°sico de funcionamento",
            "timeout": 10
        }
    ]


def test_agent_interaction():
    """Testa intera√ß√£o completa com agente (autenticado)"""
    print("\n=== TESTE INTERA√á√ÉO COM AGENTE ===")
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # 1. Listar agentes
        response = requests.get(f"{BASE_URL}/v1/agents", headers=headers)
        assert response.status_code == 200, f"Falha ao listar agentes: {response.status_code}"
        
        agents = response.json().get("agents", [])
        assert agents, "Nenhum agente encontrado"
        
        print(f"Agentes dispon√≠veis: {[a['name'] for a in agents]}")
        
        # 2. Carregar perguntas de teste  
        test_questions = load_test_questions()
        agent_id = agents[0]["agent_id"]
        
        # 3. Testar primeira pergunta apenas (para n√£o demorar)
        question_data = test_questions[0]
        print(f"Testando pergunta: {question_data['question']}")
        
        ask_data = {
            "message": question_data["question"],
            "user_id": "test-user",
            "session_id": "test-session",
            "clear_history": True
        }
        
        response = requests.post(
            f"{BASE_URL}/v1/agents/{agent_id}/ask",
            headers=headers,
            json=ask_data,
            timeout=question_data.get("timeout", 30)
        )
        
        assert response.status_code == 200, f"Falha ao fazer pergunta: {response.status_code} - {response.text}"
        
        answer_data = response.json()
        print(f"‚úÖ Pergunta respondida com sucesso")
        print(f"Resposta: {answer_data['response'][:100]}...")
        
    except Exception as e:
        print(f"‚ùå Erro na intera√ß√£o: {e}")
        assert False, f"Erro na intera√ß√£o: {e}"


def run_auth_tests():
    """Executa todos os testes de autentica√ß√£o"""
    print("üîê INICIANDO TESTES DE AUTENTICA√á√ÉO DA API DE AGENTES\n")
    
    tests = [
        ("Endpoint P√∫blico", test_public_endpoint),
        ("Sem Autentica√ß√£o", test_protected_endpoint_without_auth),
        ("Autentica√ß√£o Errada", test_protected_endpoint_with_wrong_auth),
        ("Autentica√ß√£o Correta", test_protected_endpoint_with_correct_auth),
        ("Intera√ß√£o Completa", test_agent_interaction)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        success = test_func()
        results.append((test_name, success))
    
    print(f"\n{'='*50}")
    print("RESUMO DOS TESTES DE AUTENTICA√á√ÉO")
    print(f"{'='*50}")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ AUTENTICA√á√ÉO FUNCIONANDO PERFEITAMENTE!")
        print(f"\nAPI Key em uso: {API_KEY}")
        print("Para testar manualmente:")
        print(f'curl -H "Authorization: Bearer {API_KEY}" {BASE_URL}/v1/agents')
    else:
        print("‚ö†Ô∏è  Alguns testes de autentica√ß√£o falharam.")
        print("\nVerifique:")
        print("1. API de agentes est√° rodando na porta 8001")
        print("2. Vari√°vel API_KEY est√° configurada")
        print("3. Depend√™ncias est√£o instaladas")


if __name__ == "__main__":
    try:
        run_auth_tests()
    except KeyboardInterrupt:
        print("\n\n‚ùå Testes interrompidos pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro geral nos testes: {e}")
        import traceback
        traceback.print_exc()